// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Steamworks2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1735.Steamworks2017.Robot;
import org.usfirst.frc1735.Steamworks2017.RobotMap;

/**
 *
 */
public class CenterOnBoiler extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CenterOnBoiler() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.turret);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
       	setTimeout(5); // Five second timeout
    	// Enable the vision subsystem (also turns on camera light)
    	Robot.turret.setVisionEnable(true);
    	//Initialize the system
    	Robot.turret.initialize();  // Determines the setpoint via camera image
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
		// Use the PID to direct the turret.  We need this in execute to avoid motor safety timeouts.
    	Robot.turret.run(); // keep running the PID to the current setpoint, or recalculate if we are onTarget (to see if we REALLY got there)

    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        boolean onTarget = Robot.turret.onTarget() || isTimedOut(); // For now, stop as soon as we get centered the first time.  Set to false if you want to center continuously.
        return onTarget;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.turret.setVisionEnable(false); // stop calculating new setpoints and turn off light.  Remain on current angle.
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    
    // Member variables
    double m_turretTarget; // thi si the calculated setpoint as determined by the camera subsystem
}
