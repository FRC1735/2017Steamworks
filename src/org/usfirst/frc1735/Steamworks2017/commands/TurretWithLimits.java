// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Steamworks2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1735.Steamworks2017.Robot;

/**
 *
 */
public class TurretWithLimits extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurretWithLimits(double magDir) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.turret);
        
        m_magDir = magDir; // Save for later

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	if (Robot.m_isBlue) {//Robot.allianceChooser.getSelected().toString().equals("Blue")) {
    		m_magDir = -m_magDir; // Save the desired magnitude and direction, but reverse it for the Blue side (autonomous programming assumes red)
    		System.out.println("We are Blue and our magDir is "+ m_magDir);
    	}
    	else {
    		System.out.println("We are Red and our magDir is "+ m_magDir);  		
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.turret.directDrive(m_magDir);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	double currentPosition = Robot.turret.getPosition();
    	if (m_magDir < 0) { // If turning left
    		return (currentPosition <= Robot.turret.getLeftLimit());
    	}
    	else { // Turning right
    		return (currentPosition >= Robot.turret.getRightLimit());
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.turret.directDrive(0);
    	
    	// If we inverted the drive direction for 'blue", put it back to the "red" default.  This allows us to run autonomous multiple times in the pits without restarting/reinitializing robot code...
       	if (Robot.m_isBlue) {//Robot.allianceChooser.getSelected().toString().equals("Blue")) {
    		m_magDir = -m_magDir;
       	}

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    
    // Member variables
    double m_magDir;
}
