// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Steamworks2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1735.Steamworks2017.Robot;
import org.usfirst.frc1735.Steamworks2017.subsystems.DriveTrain;

/**
 *
 */
public class AutonomousCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	// Turn on the PID controller, zero sensor to current position, and setpoint to zero.
    	// i.e. turn on pid, but remain right where we are.
    	Robot.driveTrain.setMecanumMode(); // force the state of the driveline into mecanum mode (pistons, etc)
        Robot.driveTrain.setGearMode(); // and switch the driveline control over to gearVision HW PID.  zeros sensor too.
        setTimeout(5); // set duration of commmand timeout in case we fail to find/reach our target

        // For full vision automation, must do the following:
        if (false) {
        	Robot.gearVision.setVisionEnable(true); // enable the vision feedback.  @FIXMD:  I don't think this is hooked up to anything yet.
        	double errorDistance = Robot.gearVision.getErrorDistance(); // How many inches do we need to travel?
        	m_targetRotationSetpoint = errorDistance / DriveTrain.m_inchesPerRevolution; // This is the setpoint relative to our current position of zero.
        }
        else {
        	m_targetRotationSetpoint = 1; // should move FL forward one rev, which means crab right by one wheel revolution
        }
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// Tell the system to move one revolution
    	Robot.driveTrain.setGearSetpoint(m_targetRotationSetpoint); // Crab over to the required setpoint
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (isTimedOut() || Robot.gearVision.onTarget());
    }

    // Called once after isFinished returns true
    protected void end() {
    	// return to normal mode and stop motors
    	Robot.driveTrain.setDriveMode();    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	this.end();
    }
    
    // Storage for desired setpoint calculation
    double m_targetRotationSetpoint;
}
