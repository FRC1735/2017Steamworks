// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Steamworks2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1735.Steamworks2017.Robot;
import org.usfirst.frc1735.Steamworks2017.RobotMap;

/**
 *
 */
public class TurretWithJoystick extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurretWithJoystick() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.turret);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// Get the current Operator Joystick X-axis value
    	double rawInput = Robot.oi.operator.getX();
    	
    	// Apply deadzone filter
		double joystickDeadzone = SmartDashboard.getNumber("Joystick Deadzone", 0); // default if entry not found
		if (Math.abs(rawInput) < joystickDeadzone)
			rawInput = 0;
		//Scale to the turret extents.  USes an absolute encoder, so there is a fixed value for left and right edges of motion.
		double turretTarget = ((rawInput +1)/2); // Scale joystick's range of -1:1 to be 0:1
		turretTarget = (turretTarget * (Robot.turret.getRightLimit() - Robot.turret.getLeftLimit())); // scale to the legal rotation range
		turretTarget = turretTarget + Robot.turret.getLeftLimit(); // and shift to match left limit in case it's nonzero.
    	
		//System.out.println("Turret setpoint calculated to be " + turretTarget);
		if (false) {
			// Use the PID to direct the turret
			RobotMap.turretTurretTurner.set(turretTarget); // target is in terms of an absolute rotation between left and right limits
		}
		else {
			// For initial debug/bringup:  drive the joystick directly at 1/4 impulse... Just to confirm it turns.
			// This won't obey any soft limits or restrictions, so use with extreme caution!
			Robot.turret.directDrive(rawInput * 0.25);
		}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	// Ummm.... don't do anything.  Turret will just stay at whatever the last setpoint was.
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
