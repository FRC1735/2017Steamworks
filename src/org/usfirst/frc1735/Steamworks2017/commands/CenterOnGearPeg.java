// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Steamworks2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1735.Steamworks2017.Robot;

/**
 *
 */
public class CenterOnGearPeg extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CenterOnGearPeg() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
       	setTimeout(5); // Five second timeout
    	// Enable the vision subsystem (also turns on camera light)
       	Robot.gearVision.setVisionEnable(true);
       	// Ask the GearVision system how far off we are
       	double errorDistance = Robot.gearVision.getErrorDistance();
       	// Convert this into rotations, which is what the setpoint requires
       	m_rotationSetpoint = errorDistance/Robot.driveTrain.m_inchesPerRevolution;
       	Robot.driveTrain.setGearMode(); // Enable the pid.  (@FIXME:  Bury this inside setVisionEnable?)
       	Robot.driveTrain.setGearSetpoint(m_rotationSetpoint);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.driveTrain.setGearSetpoint(m_rotationSetpoint);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return Robot.gearVision.onTarget() || isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.setDriveMode(); // Turn off PID and let drivetrain revert to normal control
    	Robot.gearVision.setVisionEnable(false); // Turn off vision subsystem and camera light
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    
    // Member Variables
    double m_rotationSetpoint; // the rotational setpoint (with initial position being 0 rotations).  Positive is to the right.
}
