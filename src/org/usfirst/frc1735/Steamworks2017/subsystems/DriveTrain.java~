// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Steamworks2017.subsystems;

import org.usfirst.frc1735.Steamworks2017.Robot;
import org.usfirst.frc1735.Steamworks2017.RobotMap;
import org.usfirst.frc1735.Steamworks2017.commands.*;
import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftMotor = RobotMap.driveTrainLeftMotor;
    private final SpeedController rightMotor = RobotMap.driveTrainRightMotor;
    private final RobotDrive robotDrive21 = RobotMap.driveTrainRobotDrive21;
    private final CANTalon fLMotor = RobotMap.driveTrainFLMotor;
    private final CANTalon fRMotor = RobotMap.driveTrainFRMotor;
    private final CANTalon bLMotor = RobotMap.driveTrainBLMotor;
    private final CANTalon bRMotor = RobotMap.driveTrainBRMotor;
    private final RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWIthJoysticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void tankDriveWithJoysticks(Joystick left, Joystick right) {
    double driveLeft = left.getY();	
    double driveRight = right.getY();
    this.tankDrive(-driveLeft, -driveRight);
    
    }
    
    public void tankDrive(double driveLeft,double driveRight) {
    	robotDrive21.tankDrive(driveLeft, driveRight);
    }

    public void arcadeDrive(double moveValue,double rotateValue) {
    	boolean squaredInputs = false;
		robotDrive41.arcadeDrive(moveValue, rotateValue, squaredInputs );
    }
    
    public void mecanumDrive(double driveX,double driveY,double rotation) {
    	double gyroAngle = 0;
		robotDrive41.mecanumDrive_Cartesian(driveX, driveY, rotation, gyroAngle );
    }

	public void octaCanumDriveWithJoysticks(Joystick joyLeft, Joystick joyRight) {
		// First, find out which operating mode is requested
		if (Robot.oi.mecanumMode.get()) {
			// Here, we are in mecanum mode with the mecanum wheels
			mecanumDrive(joyRight.getX(), joyLeft.getY(), joyRight.getY());
		}
		else {
			// Here, we are in arcade mode w/ the traction wheels
			arcadeDrive(joyRight.getX(), joyRight.getY());
		}
	}
}

