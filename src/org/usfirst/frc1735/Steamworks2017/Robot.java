// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
//
//Ioannis's
package org.usfirst.frc1735.Steamworks2017;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1735.Steamworks2017.commands.*;
import org.usfirst.frc1735.Steamworks2017.subsystems.*;
import org.usfirst.frc1735.Steamworks2017.commands.AutonomousDoNothing;

import com.kauailabs.navx.frc.AHRS;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */

public class Robot extends IterativeRobot {

    Command autonomousCommand;
    //Create a chooser for Autonomous mode...
    // Allows user to select which autonomous mode to run from the Smart Dashboard
    SendableChooser<CommandGroup> autoChooser;


    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static PDP pDP;
    public static Turret turret;
    public static Shooter shooter;
    public static GearVision gearVision;
    public static Feeder feeder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Additional Member variables

    // High-pass filter.  Any joystick absolute value less than this should be clamped to zero.
    public static double m_joystickFilter = 0.2;

    // NAVX-MXP interface
    public static AHRS ahrs;
    
    // holds the driverstation alliance information from FMS (use for handling assymetric fields)
    public static Alliance m_alliance;
    
    // ============================
    // Performance Analysis support
    // ============================
    double loopTimeCurrent;
    double loopTimePrev;
    double loopTimeDifference;
    double localTimeCurrent;
    double localTimeDifference;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        pDP = new PDP();
        turret = new Turret();
        shooter = new Shooter();
        gearVision = new GearVision();
        feeder = new Feeder();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // Commenting out BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        //SAT:  Don't instantiate the auto-generated command since we replace it with a chooser!
        //        autonomousCommand = new AutonomousCommand();

    // commenting out END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        System.out.println("About to create Autonomous Chooser");
        autoChooser = new SendableChooser();
        // Provide the available choices
        autoChooser.addObject("Do Nothing",  new AutonomousDoNothing());
        autoChooser.addDefault("Experimental", new AutonomousExperiment());
        // Add the chooser widget to the dashboard
        SmartDashboard.putData("Autonomous Mode Chooser", autoChooser);
                
        
	    try {
			/***********************************************************************
			 * navX-MXP:
			 * - Communication via RoboRIO MXP (SPI, I2C, TTL UART) and USB.            
			 * - See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface.
			 * 
			 * navX-Micro:
			 * - Communication via I2C (RoboRIO MXP or Onboard) and USB.
			 * - See http://navx-micro.kauailabs.com/guidance/selecting-an-interface.
			 * 
			 * Multiple navX-model devices on a single robot are supported.
			 ************************************************************************/
	        ahrs = new AHRS(SPI.Port.kMXP); 
	    } catch (RuntimeException ex ) {
	        DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
	    }
    	ahrs.zeroYaw(); // Init the gyro to zero degrees
    	
    	// Initialize drivetrain code the depends on the presence of a gyro:
    	Robot.driveTrain.drivetrainInit();
    	
    	// Initialize the Talon PID for various subsystems; wanted this after constructors.
    	Robot.turret.turretInit();
    	Robot.shooter.shooterInit();
    	
    	// Set an initial value for SmartDashboard's joystick deadzone variable
    	SmartDashboard.putNumber("Joystick Deadzone", m_joystickFilter);
    	
        // Extract our alliance color for this match (just in case it becomes useful later... like for lights.  Or asymmetrical fields.
        m_alliance = DriverStation.getInstance().getAlliance();
        System.out.println("Our alliance color is: " + m_alliance.toString()); //Alliance.Red  or Blue or Invalid

		// For debug, display the scheduler on the smart dashboard so we can see what commands are actually running
		SmartDashboard.putData(Scheduler.getInstance());

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        // Commented out autogenerated version: if (autonomousCommand != null) autonomousCommand.start();

    	ahrs.reset(); // Init the gyro to zero degrees at the start of the match to compensate for any drift that occurred while disabled and waiting for match to start
    	//ahrs.zeroYaw(); // reset the compensation factor as well.

    	// We use the Chooser:
       	autonomousCommand = (Command) autoChooser.getSelected();
    	// Some error checkcing in case the chooser is broken:
    	if (autonomousCommand != null) autonomousCommand.start();
    	else System.out.println("ERROR:  Chooser could not find a selected Autonomous Command!  getSelected() returned NULL");
   	
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	// =================
    	// Perf analysis
    	// =================
    	loopTimeCurrent = Timer.getFPGATimestamp();
    	loopTimeDifference = Math.round((loopTimeCurrent - loopTimePrev) * 1000);
    	loopTimePrev = loopTimeCurrent;
    	//System.out.println("Loop Process Time: " + loopTimeDifference + "ms");

    	Scheduler.getInstance().run();
    	
        localTimeCurrent = Timer.getFPGATimestamp();
        localTimeDifference = Math.round((loopTimeCurrent - localTimeCurrent) * 1000);
    	//System.out.println("Local Process Time: " + localTimeDifference + "ms");
    	
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    //----------------------
    // Custom user functions
    //----------------------
    
    // Master debug enabel for hiding debug messages (noise and performance)
    public static boolean isDbgOn() {
    	return SmartDashboard.getBoolean("Master Debug Enable", false); // Second arg is default if entry not found
    }

    // Wrapper to handle such messages cleanly
    public static void dbgPrintln(String message) {
    	if(isDbgOn()) {
    		System.out.println(message);
    	}
    }

}
